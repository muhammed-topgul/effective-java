Item 1: Consider static factory methods instead of constructors.
     Advantages:
        - One advantage of static factory methods is that, unlike constructors, they have names.
        - A second advantage of static factory methods is that, unlike constructors, they are not required to create a new object each time theyâ€™re invoked
        - A third advantage of static factory methods is that, unlike constructors, they can return an object of any subtype of their return type.
        - A fourth advantage of static factories is that the class of the returned object can vary from call to call as a function of the input parameters.
        - A fifth advantage of static factories is that the class of the returned object need not exist when the class containing the method is written.

     Limitations:
        - The main limitation of providing only static factory methods is that classes without public or protected constructors cannot be subclassed.
        - A second shortcoming of static factory methods is that they are hard for programmers to find.

Item 2: Consider a builder when faced with many constructor parameters.

Item 3: Enforce the singleton property with a private constructor or an enum type.
        - Single-element enum type is often the best way to implement a singleton.

Item 4: Enforce non-instantiability with a private constructor.
        - Attempting to enforce non-instantiability by making a class abstract does not work.
          The class can be subclassed and the subclass instantiated.
        - A class can be made non-instantiable by including a private constructor.
        - Favor class over enum.

Item 5: Prefer dependency injection to hard-wiring resources.
        - Static utility classes and singletons are inappropriate for classes whose behavior is parameterized by an underlying resource.
        - A simple pattern that satisfies this requirement is to pass the resource into the constructor when creating a new instance.

Item 6: Avoid creating unnecessary objects.

Item 7: Eliminate obsolete object references.

Item 8: Avoid finalizers and cleaners.
        - Finalizers are unpredictable, often dangerous, and generally unnecessary.
        - Cleaners are less dangerous than finalizers, but still unpredictable, slow, and generally unnecessary.

Item 9: Prefer try-with-resources to try-finally.