Item 15: Minimize the accessibility of classes and members.
         - Make each class or member as inaccessible as possible.
         - Instance fields of public classes should rarely be public.
         - Classes with public mutable fields are not generally thread-safe.
         - It is wrong for a class to have a public static final array field, or an accessor that returns such a field.

Item 16: In public classes, use accessor methods, not public fields.

Item 17: Minimize mutability.
         - Don’t provide methods that modify the object’s state.
         - Ensure that the class can’t be extended.
         - Make all fields final.
         - Make all fields private
         - Ensure exclusive access to any mutable components.

Item 18: Favor composition over inheritance.
         - Unlike method invocation, inheritance violates encapsulation.

Item 19: Design and document for inheritance or else prohibit it.
         - Constructors must not invoke overridable methods.

Item 20: Prefer interfaces to abstract classes.
         - Existing classes can easily be retrofitted to implement a new interface.
         - Interfaces are ideal for defining mixins.
         - Interfaces allow for the construction of non-hierarchical type frameworks.
         - Interfaces enable safe, powerful functionality enhancements.
         - Good documentation is absolutely essential in a skeletal implementation.

Item 21: Design interfaces for posterity.

Item 22: Use interfaces only to define types.